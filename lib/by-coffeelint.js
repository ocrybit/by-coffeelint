// Generated by CoffeeScript 1.3.3
(function() {
  var ByCoffeeLint, EventEmitter, coffeelint, colors, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  colors = require('colors');

  coffeelint = require('coffeelint');

  fs = require('fs');

  module.exports = ByCoffeeLint = (function(_super) {

    __extends(ByCoffeeLint, _super);

    function ByCoffeeLint(opts) {
      var _base, _ref;
      this.opts = opts != null ? opts : {};
      if ((_ref = (_base = this.opts).config) == null) {
        _base.config = {};
      }
    }

    ByCoffeeLint.prototype._setListeners = function(bystander) {
      var _this = this;
      this.bystander = bystander;
      return this.bystander.by.coffeescript.on('compiled', function(data) {
        data.lint = _this._coffeeLint(data.code);
        if (!_this.opts.nolog) {
          console.log(_this._parseLint(data.lint).message + (" <= " + data.file).grey + '\n');
        }
        return _this.emit('linted', data);
      });
    };

    ByCoffeeLint.prototype._parseLint = function(lint) {
      var error, errorCount, errors, lcolor, v, warnCount, _i, _len;
      errorCount = 0;
      warnCount = 0;
      if (lint.err) {
        return {
          message: ("\n  lint compile error: " + lint.err).red,
          errorCount: errorCount
        };
      } else if (lint.length === 0) {
        return {
          message: "",
          errorCount: errorCount
        };
      } else {
        errors = [];
        for (_i = 0, _len = lint.length; _i < _len; _i++) {
          v = lint[_i];
          if (v.level === 'error') {
            errorCount += 1;
            lcolor = 'red';
          } else if (v.level === 'warn') {
            lcolor = 'yellow';
            warnCount += 1;
          }
          error = [("  #" + v.lineNumber + " " + v.message + ".")[lcolor]];
          if (v.context != null) {
            error.push((" " + v.context + ".")[lcolor]);
          }
          error.push((" (" + v.rule + ")").grey);
          if (v.line) {
            error.push(("\n    => " + v.line).grey);
          }
          errors.push(error.join(''));
        }
        errors.push("  CoffeeLint: ".grey + ("" + errorCount + " errors").red + (" " + warnCount + " warnings").yellow);
        return {
          message: '\n' + errors.join('\n'),
          errorCount: errorCount
        };
      }
    };

    ByCoffeeLint.prototype._coffeeLint = function(code) {
      var lint;
      try {
        lint = coffeelint.lint(code, this.opts.config);
      } catch (e) {
        lint = {
          err: e
        };
      }
      return lint;
    };

    return ByCoffeeLint;

  })(EventEmitter);

}).call(this);
